package com.antcheckers.antcolony.move;

import java.util.concurrent.ThreadLocalRandom;

public class Exploitation {

    private float [] edgesAttractiveness;
    private float maxAttractiveness;
    private int appearances;
    private int[] appearancesIndexes;

    public Exploitation(float[] edgesAttractiveness) {
        this.edgesAttractiveness = edgesAttractiveness;
    }

    public int getEdgeIndex() {
        setMaxAttractiveness();
        setMaxAttractivenessAppearances();
        createAndFillAppearancesIndexes();
        return getRandomAppearanceIndex();
    }

    private void setMaxAttractiveness() {
        maxAttractiveness = 0;
        for (float value : edgesAttractiveness)
            if(value > maxAttractiveness)
                maxAttractiveness = value;
    }

    private void setMaxAttractivenessAppearances() {
        appearances = 0;
        for (float value : edgesAttractiveness) {
            if(value == maxAttractiveness)
                appearances++;
        }
    }

    private void createAndFillAppearancesIndexes() {
        appearancesIndexes = new int[appearances];
        for (int i=0; i<edgesAttractiveness.length; i++) {
            if(edgesAttractiveness[i] == maxAttractiveness)
                appearancesIndexes[--appearances] = i;
        }
    }

    private int getRandomAppearanceIndex() {
        int random = ThreadLocalRandom.current().nextInt(0, appearancesIndexes.length);
        return appearancesIndexes[random];
    }
}